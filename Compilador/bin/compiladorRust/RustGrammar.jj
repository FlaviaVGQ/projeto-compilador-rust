/********************************
 * JavaCC - Compilador Rust     *
 * Alteração no RustGrammar.jj  *
 * Teste no RustGrammar.java    *
 * Main.java programa principal *
 ********************************/
options
{
  static = true;
}

PARSER_BEGIN(RustGrammar)
package compiladorRust;

import java.io.FileReader;
import java.io.Reader;

public class RustGrammar {

    public static void main(String[] args) {
        String arquivo = args.length > 0 ? args[0] : "Teste.txt";

        try (Reader r = new FileReader(arquivo)) {

            RustGrammar parser = new RustGrammar(r);

            parser.RUN(); 

            System.out.println("✓ Arquivo analisado sem erros.");

        } catch (ParseException e) {
            System.err.println("Erro de sintaxe: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
PARSER_END(RustGrammar)


// Espaços e comentários ----------------------------------
SKIP :
{
      " " | "\t" | "\n" | "\r" | "\f"

  | <COMENTARIO_SIMPLES :
        "//" (~["\n", "\r"])* ( "\r\n" | "\n" | "\r" )?
    >

  | <COMENTARIO_LONGO :
        "/*" ( ~["*"] | ("*" ~["/"]) )* "*/"
    >
}


// Palavras reservadas ------------------------------------
TOKEN :
{
      <FN      : "fn">         { System.out.println("Palavra Reservada: " + image); }
    | <MAIN    : "main">       { System.out.println("Palavra Reservada: " + image); } 
    | <LET     : "let">        { System.out.println("Palavra Reservada: " + image); }
    | <MUT     : "mut">        { System.out.println("Palavra Reservada: " + image); }
    | <IF      : "if">         { System.out.println("Palavra Reservada: " + image); }
    | <ELSE_IF : "else if">    { System.out.println("Palavra Reservada: " + image); }
    | <ELSE    : "else">       { System.out.println("Palavra Reservada: " + image); }
    | <WHILE   : "while">      { System.out.println("Palavra Reservada: " + image); }
    | <TRUE    : "true">       { System.out.println("Literal Bool: " + image); }
    | <FALSE   : "false">      { System.out.println("Literal Bool: " + image); }
    | <PRINT   : "print!">     { System.out.println("Palavra Reservada: " + image); }
    | <PRINTLN : "println!">   { System.out.println("Palavra Reservada: " + image); }
    | <RETURN  : "return">     { System.out.println("Palavra Reservada: " + image); }
    | <USE     : "use">        { System.out.println("Palavra Reservada: " + image); }
    | <READLINE: "read_line">  { System.out.println("Palavra Reservada: " + image); }
	| <BREAK   : "break">      { System.out.println("Palavra Reservada: " + image); }
	| <CONTINUE: "continue">   { System.out.println("Palavra Reservada: " + image); } 
}

// Tipos básicos ------------------------------------------
TOKEN :
{
      <I8         : "i8">     { System.out.println("Tipo: " + image); }
    | <I16        : "i16">    { System.out.println("Tipo: " + image); }
    | <I32        : "i32">    { System.out.println("Tipo: " + image); }
    | <I64        : "i64">    { System.out.println("Tipo: " + image); }
    | <U8         : "u8">     { System.out.println("Tipo: " + image); }
    | <U16        : "u16">    { System.out.println("Tipo: " + image); }
    | <U32        : "u32">    { System.out.println("Tipo: " + image); }
    | <U64        : "u64">    { System.out.println("Tipo: " + image); }
    | <F32        : "f32">    { System.out.println("Tipo: " + image); }
    | <F64        : "f64">    { System.out.println("Tipo: " + image); }
    | <BOOL_TYPE  : "bool">   { System.out.println("Tipo: " + image); }
    | <CHAR_TYPE  : "char">   { System.out.println("Tipo: " + image); }
    | <STRING_TYPE: "String"> { System.out.println("Tipo: " + image); } 
}

// Delimitadores ------------------------------------------
TOKEN :
{
      <ABRE_CHAVES     : "{">  { System.out.println("Abre Chaves: " + image); }
    | <FECHA_CHAVES    : "}">  { System.out.println("Fecha Chaves: " + image); }
    | <ABRE_PARENTESES : "(">  { System.out.println("Abre Parênteses: " + image); }
    | <FECHA_PARENTESES: ")">  { System.out.println("Fecha Parênteses: " + image); }
    | <PONTO_VIRGULA   : ";">  { System.out.println("Ponto e Vírgula: " + image); }
    | <VIRGULA         : ",">  { System.out.println("Vírgula: " + image); }
    | <DOIS_PONTOS     : ":">  { System.out.println("Dois Pontos: " + image); }
    | <SETA            : "->"> { System.out.println("Seta: " + image); }
    | <PONTO           : ".">  { System.out.println("Ponto: " + image); }
}

// Operadores ---------------------------------------------
TOKEN :
{
      <IGUAL            : "=">  { System.out.println("Operador = : " + image); }
    | <MAIS             : "+">  { System.out.println("Operador +: " + image); }
    | <MENOS            : "-">  { System.out.println("Operador -: " + image); }
    | <ASTERISCO        : "*">  { System.out.println("Operador *: " + image); }
    | <BARRA            : "/">  { System.out.println("Operador /: " + image); }
    | <PORCENTAGEM      : "%">  { System.out.println("Operador %: " + image); }
    | <E_LOGICO         : "&&"> { System.out.println("Operador &&: " + image); }
    | <OU_LOGICO        : "||"> { System.out.println("Operador ||: " + image); }
    | <NEGACAO          : "!">  { System.out.println("Operador !: " + image); }
    | <DUPLO_IGUAL      : "=="> { System.out.println("Operador ==: " + image); }
    | <DIFERENTE        : "!="> { System.out.println("Operador !=: " + image); }
    | <MAIOR            : "<">  { System.out.println("Operador <: " + image); }
    | <MENOR            : ">">  { System.out.println("Operador >: " + image); }
    | <MENOR_IGUAL      : "<="> { System.out.println("Operador <=: " + image); }
    | <MAIOR_IGUAL      : ">="> { System.out.println("Operador >=: " + image); }
    | <MAIS_IGUAL       : "+="> { System.out.println("Operador +=: " + image); }
    | <MENOS_IGUAL      : "-="> { System.out.println("Operador -=: " + image); }
    | <ASTERISCO_IGUAL  : "*="> { System.out.println("Operador *=: " + image); }
    | <BARRA_IGUAL      : "/="> { System.out.println("Operador /=: " + image); }
    | <PORCENTAGEM_IGUAL: "%="> { System.out.println("Operador %=: " + image); }
    | <DUPLO_DOIS_PONTOS: "::"> { System.out.println("Operador de Escopo: " + image); }
    | <E_COMERCIAL      : "&">  { System.out.println("Operador &: " + image); }
    
}

// Identificador ------------------------------------------
TOKEN :
{
    <IDENTIFICADOR : <LETRA> (<LETRA> | <DIGITO> | "_")* > { System.out.println("Identificador: " + image); }
  | < #LETRA       : ["a"-"z", "A"-"Z"] >
  | < #DIGITO      : ["0"-"9"] >
}

// Literais -----------------------------------------------
TOKEN :
{
  	  < INTEGER_LITERAL : (["+", "-"])? (["0"-"9"])+ > { System.out.println("Literal Int: " + image); }

  	  | <FLOAT_LITERAL  : (["+", "-"])? (["0"-"9"])+ "." (["0"-"9"])+ > { System.out.println("Literal Ponto Flutuante: " + image); }

  	  | < STRING_LITERAL: "\"" (~["\""] | "\\\"")* "\"" > { System.out.println("Literal String: " + image); }

  	  | < BOOL_LITERAL  : ("!")? (<TRUE> | <FALSE>) > { System.out.println("Literal Bool: " + image); }
}


/**********************************
 * REGRAS GRAMATICAIS SINTATICAS *
 **********************************/

// RUN: ponto de entrada geral do parser. Analisa um programa inteiro até o EOF.
void RUN() : {}
{
    Programa() <EOF>
}


/*******************************************************************
 * Programa: lista de itens de topo (funções, variáveis, imports). *
 * Exemplo Rust:                                                   * 
 * use std::io;                                                    *
 * fn main() {}                                                    *
 *******************************************************************/

void Programa() : {}
{
    ( Item() )*
}


/****************************************************************************
 * Item: representa cada construção de topo do arquivo.                     *
 * Pode ser um import, função, declaração de variável ou expressão isolada. *
 ****************************************************************************/

void Item() : {}
{
      ImportBiblioteca()
    | LOOKAHEAD(2) DeclaracaoMain()
    | DeclaracaoFuncao()
    | DeclaracaoVariavel()
}

/**********************************************************************
 * ImportBiblioteca: declaração "use" para importar nomes ou módulos. *
 * Exemplo: use std::io;                                              *
 **********************************************************************/

void ImportBiblioteca() : {}
{
    <USE> CaminhoImportacao() <PONTO_VIRGULA>
}

// Caminho separado por "::" → Exp.: std::io
void CaminhoImportacao() : {}
{
    <IDENTIFICADOR> ( <DUPLO_DOIS_PONTOS> <IDENTIFICADOR> )*
}

/************************
 * Declaração de Função *                                   
 ************************/

//Declaração do Main
void DeclaracaoMain() : {}
{
    <FN> <MAIN> <ABRE_PARENTESES> <FECHA_PARENTESES> Bloco()
}

// Define uma função com parâmetros, tipo de retorno e corpo → Exp.: fn soma(a: i32, b: i32) -> i32 { a + b }
void DeclaracaoFuncao() : {}
{
    <FN> <IDENTIFICADOR> <ABRE_PARENTESES> ListaParametros() <FECHA_PARENTESES> TipoRetorno() Bloco()
}

// Zero ou mais parâmetros separados por vírgula → Exp.: ""  (vazio)  |  x: i32, y: i32
void ListaParametros() : {}
{
    (Parametro() (<VIRGULA> Parametro())* )?
}

// Par (identificador : tipo) → Exp: valor: f64
void Parametro() : {}
{
    <IDENTIFICADOR> <DOIS_PONTOS> Tipo()
}

// Seta "->" seguida de tipo → Exp.: (a: i32, b: i32) -> i32 { < code > }
void TipoRetorno() : {}
{
    ( <SETA> Tipo() )?
}

// tipos primitivos da linguagem Rust
void Tipo() : {} {
      <I8> | <I16> | <I32> | <I64>
    | <U8> | <U16> | <U32> | <U64>
    | <F32> | <F64>
    | <BOOL_TYPE> | < CHAR_TYPE >
    | <STRING_TYPE>
}

/**************************
 * Declaração de Variável *                               
 **************************/

// Declara variável → Exp.: let mut nome_var: i32 = 10;
void DeclaracaoVariavel() : {}
{
    <LET> ( <MUT> )? Padrao() ( <DOIS_PONTOS> Tipo() )? ( <IGUAL> Expressao() )? <PONTO_VIRGULA>
}


// Declara uma estrutura padrão de variável (possivelmente composta). 
// Pode ser um identificador simples ou uma tupla com múltiplos padrões.
// Exemplos: let x; let (a, b);
void Padrao() : {}
{
      <IDENTIFICADOR>
    | <ABRE_PARENTESES> Padrao() (<VIRGULA> Padrao())* <FECHA_PARENTESES>
}

// Lista de expressões separadas por vírgula. Exemplo: println!("{} {}", a, b);
void ListaExpressoes() : {}
{
    Expressao() (<VIRGULA> Expressao())*
}


/********************************
 * Bloco e Declarações internas *
 ********************************/

// Sequência de comandos delimitada por chaves → Exp.: { <code> }
void Bloco() : {}
{
    <ABRE_CHAVES> (CorpoDeDeclaracao())* <FECHA_CHAVES>
}

// Declarações ou instruções possíveis dentro de um bloco.
void CorpoDeDeclaracao() : {}
{
      While()
    | Condicional()
    | Return()
    | Break()
    | Continue()
    | Print()
    | DeclaracaoVariavel()
    | LOOKAHEAD(2) Input()
}


/*************************
 * Estrutura de Controle *                                
 *************************/

// Laço "while" com condição () opcional → Exp.: while x < 10 { ... }
void While() : {}
{
    <WHILE> (<ABRE_PARENTESES>)? Expressao() (<FECHA_PARENTESES>)? Bloco()
}

// break;
void Break() : {}
{
    <BREAK> <PONTO_VIRGULA>
}

// continue;
void Continue() : {}
{
    <CONTINUE> <PONTO_VIRGULA>
}


// Condicional if/else if/else → Exp.: if n == 0 { ... } else if { ... } else { ... }
void Condicional() : {}
{
    <IF> (<ABRE_PARENTESES>)? Expressao() (<FECHA_PARENTESES>)? Bloco() (<ELSE_IF> (<ABRE_PARENTESES>)? Expressao() (<FECHA_PARENTESES>)? Bloco())* (<ELSE> Bloco())?
}

/*******************
 * ENTRADA E SAIDA *
 *******************/

//Print
void Print() : {}
{
    (<PRINT> | <PRINTLN>) <ABRE_PARENTESES> (ListaArgumentos()) <FECHA_PARENTESES> <PONTO_VIRGULA>
}

// let res = 10 ... print!("resultado = {}", res);
void ListaArgumentos() : {}
{
    (Expressao() (<VIRGULA> Expressao())* )?
}

// Input em Rust → Exp:. io::stdin().read_line(&mut linha).unwrap();
void Input() : {}
{
     VariavelOuChamada() <PONTO_VIRGULA>
}

/**************
 * EXPRESSÕES *
 **************/

void Expressao() : {}
{
    Atribuicao()
}

void Atribuicao() : {}
{
    OuLogico() ( OperadorAtribuicao() OuLogico() )?
}

// Lista de operadores de atribuição (=, +=, -=, ...)
void OperadorAtribuicao() : {}
{
      <IGUAL>
    | <MAIS_IGUAL>
    | <MENOS_IGUAL>
    | <ASTERISCO_IGUAL>
    | <BARRA_IGUAL>
    | <PORCENTAGEM_IGUAL>
}

// Expressão com operador lógico ||
void OuLogico() : {}
{
    ELogico() ( <OU_LOGICO> ELogico() )*
}

// Expressão com operador lógico &&
void ELogico() : {}
{
    Igualdade() ( <E_LOGICO> Igualdade() )*
}

// Igualdade → comparação == ou !=.
void Igualdade() : {}
{
    Relacional() ( ( <DUPLO_IGUAL> | <DIFERENTE> ) Relacional() )*
}

// Comparação → <, <=, >, >
void Relacional() : {}
{
    Aritmetica() ( ( <MAIOR> | <MENOR_IGUAL> | <MENOR> | <MAIOR_IGUAL> ) Aritmetica() )*
}

// Soma e subtração → Exp: a + b - 3
void Aritmetica() : {}
{
    Termo() ( ( <MAIS> | <MENOS> ) Termo() )*
}

//Multiplicação, divisão e módulo → Exp: n * 2 / m
void Termo() : {}
{
    Fator() ( ( <ASTERISCO> | <BARRA> | <PORCENTAGEM> ) Fator() )*
}


/************************************************************************************
 * Define os elementos mais simples em Rust                                         *
 * Respeitar a precedência: parênteses, unário, literais ou chamadas                *
 * → Exp: (x) > Simbolos: -! > *, /, %, ... > + ou - > Comparação; ==, !=, &&, ', = *
 ************************************************************************************/

void Fator() : {}
{
     <ABRE_PARENTESES> (ListaExpressoes()) <FECHA_PARENTESES> 
    | <MENOS> Fator()
    | <NEGACAO> Fator()
    | <E_COMERCIAL> ( <MUT> )? Fator()
    | Literal()
    | VariavelOuChamada()
}

/***********************************************************************************************
 * Reconhece uma variável ou uma chamada de função.                                            *
 * Primeiro, lê um identificador (que pode ser simples ou com caminho tipo módulo::submódulo). *
 * Em seguida, opcionalmente, lê os parênteses com argumentos.                                 *
 * Se existirem parênteses, trata como chamada de função; caso contrário, como variável.       *
 ***********************************************************************************************/

void VariavelOuChamada() : {}
{
    IdentComCaminho() 
    (
        ( <ABRE_PARENTESES> ListaArgumentos() <FECHA_PARENTESES> ) 
        | (<PONTO> <READLINE> <ABRE_PARENTESES> <E_COMERCIAL> <MUT> <IDENTIFICADOR> <FECHA_PARENTESES>
          (<PONTO> <IDENTIFICADOR> <ABRE_PARENTESES> <STRING_LITERAL> <FECHA_PARENTESES>)* <PONTO_VIRGULA>) 
    )*
}


// Para indentificar o Input de Rust → String::new;
// Começa com um identificador ou String::new
void IdentComCaminho() : {}
{
    ( <IDENTIFICADOR> | <STRING_TYPE> )
    ( <DUPLO_DOIS_PONTOS> <IDENTIFICADOR> )*
}

// Valores literais suportados → Exp.: 123, 3.14, "texto", true
void Literal() : {}
{
      <INTEGER_LITERAL>
    | <FLOAT_LITERAL>
    | <STRING_LITERAL>
    | <TRUE>
    | <FALSE>
}

// Instrução de retorno de função.
// 'return;' ou 'return x;'
void Return() : {}
{
    (<RETURN>)? Expressao() (<PONTO_VIRGULA>)?  
}