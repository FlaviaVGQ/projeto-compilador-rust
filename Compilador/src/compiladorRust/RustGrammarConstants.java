/* Generated By:JavaCC: Do not edit this line. RustGrammarConstants.java */
package compiladorRust;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RustGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO_SIMPLES = 6;
  /** RegularExpression Id. */
  int COMENTARIO_LONGO = 7;
  /** RegularExpression Id. */
  int FN = 8;
  /** RegularExpression Id. */
  int MAIN = 9;
  /** RegularExpression Id. */
  int LET = 10;
  /** RegularExpression Id. */
  int MUT = 11;
  /** RegularExpression Id. */
  int IF = 12;
  /** RegularExpression Id. */
  int ELSE_IF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int PRINT = 18;
  /** RegularExpression Id. */
  int PRINTLN = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int USE = 21;
  /** RegularExpression Id. */
  int READLINE = 22;
  /** RegularExpression Id. */
  int I8 = 23;
  /** RegularExpression Id. */
  int I16 = 24;
  /** RegularExpression Id. */
  int I32 = 25;
  /** RegularExpression Id. */
  int I64 = 26;
  /** RegularExpression Id. */
  int U8 = 27;
  /** RegularExpression Id. */
  int U16 = 28;
  /** RegularExpression Id. */
  int U32 = 29;
  /** RegularExpression Id. */
  int U64 = 30;
  /** RegularExpression Id. */
  int F32 = 31;
  /** RegularExpression Id. */
  int F64 = 32;
  /** RegularExpression Id. */
  int BOOL_TYPE = 33;
  /** RegularExpression Id. */
  int CHAR_TYPE = 34;
  /** RegularExpression Id. */
  int STRING_TYPE = 35;
  /** RegularExpression Id. */
  int ABRE_CHAVES = 36;
  /** RegularExpression Id. */
  int FECHA_CHAVES = 37;
  /** RegularExpression Id. */
  int ABRE_PARENTESES = 38;
  /** RegularExpression Id. */
  int FECHA_PARENTESES = 39;
  /** RegularExpression Id. */
  int PONTO_VIRGULA = 40;
  /** RegularExpression Id. */
  int VIRGULA = 41;
  /** RegularExpression Id. */
  int DOIS_PONTOS = 42;
  /** RegularExpression Id. */
  int SETA = 43;
  /** RegularExpression Id. */
  int PONTO = 44;
  /** RegularExpression Id. */
  int IGUAL = 45;
  /** RegularExpression Id. */
  int MAIS = 46;
  /** RegularExpression Id. */
  int MENOS = 47;
  /** RegularExpression Id. */
  int ASTERISCO = 48;
  /** RegularExpression Id. */
  int BARRA = 49;
  /** RegularExpression Id. */
  int PORCENTAGEM = 50;
  /** RegularExpression Id. */
  int E_LOGICO = 51;
  /** RegularExpression Id. */
  int OU_LOGICO = 52;
  /** RegularExpression Id. */
  int NEGACAO = 53;
  /** RegularExpression Id. */
  int DUPLO_IGUAL = 54;
  /** RegularExpression Id. */
  int DIFERENTE = 55;
  /** RegularExpression Id. */
  int MAIOR = 56;
  /** RegularExpression Id. */
  int MENOR = 57;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 58;
  /** RegularExpression Id. */
  int MAIOR_IGUAL = 59;
  /** RegularExpression Id. */
  int MAIS_IGUAL = 60;
  /** RegularExpression Id. */
  int MENOS_IGUAL = 61;
  /** RegularExpression Id. */
  int ASTERISCO_IGUAL = 62;
  /** RegularExpression Id. */
  int BARRA_IGUAL = 63;
  /** RegularExpression Id. */
  int PORCENTAGEM_IGUAL = 64;
  /** RegularExpression Id. */
  int DUPLO_DOIS_PONTOS = 65;
  /** RegularExpression Id. */
  int E_COMERCIAL = 66;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 67;
  /** RegularExpression Id. */
  int LETRA = 68;
  /** RegularExpression Id. */
  int DIGITO = 69;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 70;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 71;
  /** RegularExpression Id. */
  int STRING_LITERAL = 72;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 73;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<COMENTARIO_SIMPLES>",
    "<COMENTARIO_LONGO>",
    "\"fn\"",
    "\"main\"",
    "\"let\"",
    "\"mut\"",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"print!\"",
    "\"println!\"",
    "\"return\"",
    "\"use\"",
    "\"read_line\"",
    "\"i8\"",
    "\"i16\"",
    "\"i32\"",
    "\"i64\"",
    "\"u8\"",
    "\"u16\"",
    "\"u32\"",
    "\"u64\"",
    "\"f32\"",
    "\"f64\"",
    "\"bool\"",
    "\"char\"",
    "\"String\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"->\"",
    "\".\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"::\"",
    "\"&\"",
    "<IDENTIFICADOR>",
    "<LETRA>",
    "<DIGITO>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOL_LITERAL>",
  };

}
