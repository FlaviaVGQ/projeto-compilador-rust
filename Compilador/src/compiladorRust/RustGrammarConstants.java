/* Generated By:JavaCC: Do not edit this line. RustGrammarConstants.java */
package compiladorRust;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RustGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FN = 7;
  /** RegularExpression Id. */
  int LET = 8;
  /** RegularExpression Id. */
  int MUT = 9;
  /** RegularExpression Id. */
  int CONST = 10;
  /** RegularExpression Id. */
  int STATIC = 11;
  /** RegularExpression Id. */
  int STRUCT = 12;
  /** RegularExpression Id. */
  int ENUM = 13;
  /** RegularExpression Id. */
  int TRAIT = 14;
  /** RegularExpression Id. */
  int IMPL = 15;
  /** RegularExpression Id. */
  int USE = 16;
  /** RegularExpression Id. */
  int MOD = 17;
  /** RegularExpression Id. */
  int PUB = 18;
  /** RegularExpression Id. */
  int CRATE = 19;
  /** RegularExpression Id. */
  int SELF = 20;
  /** RegularExpression Id. */
  int SUPER = 21;
  /** RegularExpression Id. */
  int AS = 22;
  /** RegularExpression Id. */
  int MATCH = 23;
  /** RegularExpression Id. */
  int IF = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int LOOP = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int IN = 29;
  /** RegularExpression Id. */
  int BREAK = 30;
  /** RegularExpression Id. */
  int CONTINUE = 31;
  /** RegularExpression Id. */
  int RETURN = 32;
  /** RegularExpression Id. */
  int TRUE = 33;
  /** RegularExpression Id. */
  int FALSE = 34;
  /** RegularExpression Id. */
  int PRINTLN = 35;
  /** RegularExpression Id. */
  int MACRO_RULES = 36;
  /** RegularExpression Id. */
  int I8 = 37;
  /** RegularExpression Id. */
  int I16 = 38;
  /** RegularExpression Id. */
  int I32 = 39;
  /** RegularExpression Id. */
  int I64 = 40;
  /** RegularExpression Id. */
  int ISIZE = 41;
  /** RegularExpression Id. */
  int U8 = 42;
  /** RegularExpression Id. */
  int U16 = 43;
  /** RegularExpression Id. */
  int U32 = 44;
  /** RegularExpression Id. */
  int U64 = 45;
  /** RegularExpression Id. */
  int USIZE = 46;
  /** RegularExpression Id. */
  int F32 = 47;
  /** RegularExpression Id. */
  int F64 = 48;
  /** RegularExpression Id. */
  int BOOL_TYPE = 49;
  /** RegularExpression Id. */
  int CHAR_TYPE = 50;
  /** RegularExpression Id. */
  int STR_TYPE = 51;
  /** RegularExpression Id. */
  int STRING_TYPE = 52;
  /** RegularExpression Id. */
  int UNIT_TYPE = 53;
  /** RegularExpression Id. */
  int LPAREN = 54;
  /** RegularExpression Id. */
  int RPAREN = 55;
  /** RegularExpression Id. */
  int LBRACE = 56;
  /** RegularExpression Id. */
  int RBRACE = 57;
  /** RegularExpression Id. */
  int LBRACKET = 58;
  /** RegularExpression Id. */
  int RBRACKET = 59;
  /** RegularExpression Id. */
  int SEMICOLON = 60;
  /** RegularExpression Id. */
  int COMMA = 61;
  /** RegularExpression Id. */
  int DOT = 62;
  /** RegularExpression Id. */
  int COLON = 63;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 64;
  /** RegularExpression Id. */
  int ARROW = 65;
  /** RegularExpression Id. */
  int ASSIGN = 66;
  /** RegularExpression Id. */
  int EQ = 67;
  /** RegularExpression Id. */
  int NE = 68;
  /** RegularExpression Id. */
  int LT = 69;
  /** RegularExpression Id. */
  int LE = 70;
  /** RegularExpression Id. */
  int GT = 71;
  /** RegularExpression Id. */
  int GE = 72;
  /** RegularExpression Id. */
  int AND_OP = 73;
  /** RegularExpression Id. */
  int OR_OP = 74;
  /** RegularExpression Id. */
  int NOT_OP = 75;
  /** RegularExpression Id. */
  int PLUS = 76;
  /** RegularExpression Id. */
  int MINUS = 77;
  /** RegularExpression Id. */
  int STAR = 78;
  /** RegularExpression Id. */
  int SLASH = 79;
  /** RegularExpression Id. */
  int PERCENT = 80;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 81;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 82;
  /** RegularExpression Id. */
  int STAR_ASSIGN = 83;
  /** RegularExpression Id. */
  int SLASH_ASSIGN = 84;
  /** RegularExpression Id. */
  int PERCENT_ASSIGN = 85;
  /** RegularExpression Id. */
  int IDENTIFIER = 86;
  /** RegularExpression Id. */
  int LETTER = 87;
  /** RegularExpression Id. */
  int DIGIT = 88;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 89;
  /** RegularExpression Id. */
  int FLOATING_LITERAL = 90;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 91;
  /** RegularExpression Id. */
  int STRING_LITERAL = 92;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 93;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"fn\"",
    "\"let\"",
    "\"mut\"",
    "\"const\"",
    "\"static\"",
    "\"struct\"",
    "\"enum\"",
    "\"trait\"",
    "\"impl\"",
    "\"use\"",
    "\"mod\"",
    "\"pub\"",
    "\"crate\"",
    "\"self\"",
    "\"super\"",
    "\"as\"",
    "\"match\"",
    "\"if\"",
    "\"else\"",
    "\"loop\"",
    "\"while\"",
    "\"for\"",
    "\"in\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"println!\"",
    "\"macro_rules!\"",
    "\"i8\"",
    "\"i16\"",
    "\"i32\"",
    "\"i64\"",
    "\"isize\"",
    "\"u8\"",
    "\"u16\"",
    "\"u32\"",
    "\"u64\"",
    "\"usize\"",
    "\"f32\"",
    "\"f64\"",
    "\"bool\"",
    "\"char\"",
    "\"str\"",
    "\"String\"",
    "\"()\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<FLOATING_LITERAL>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOL_LITERAL>",
  };

}
