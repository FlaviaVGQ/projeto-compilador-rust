/* RustGrammar.java */
/* Generated By:JavaCC: Do not edit this line. RustGrammar.java */
package compiladorRust;

public class RustGrammar implements RustGrammarConstants {
    public static void main(String[] args) throws Exception {

        java.io.Reader reader = new java.io.FileReader("TesteLexico.txt");
        RustGrammarTokenManager tm = new RustGrammarTokenManager(new SimpleCharStream(reader));


        Token t;
        do {
            t = tm.getNextToken();
            System.out.println("TOKEN: " + t.image + " (" + tokenImage[t.kind] + ")");
        } while (t.kind != EOF);
    }

/**************
* *** GRAMÁTICA BÁSICA DA LINGUAGEM RUST ****
***************/
  final public 
void RUN() throws ParseException {
    Program();
    jj_consume_token(0);
}

  final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      UseDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FN:
      case PUB:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      ItemDeclaration();
    }
}

  final public void UseDeclaration() throws ParseException {
    jj_consume_token(USE);
    Path();
    jj_consume_token(SEMICOLON);
}

  final public void Path() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOUBLE_COLON:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(DOUBLE_COLON);
      jj_consume_token(IDENTIFIER);
    }
}

  final public void ItemDeclaration() throws ParseException {
    FunctionDeclaration();
}

  final public void FunctionDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUB:{
      jj_consume_token(PUB);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(FN);
    jj_consume_token(IDENTIFIER);
    Parameters();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARROW:{
      ReturnType();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    Block();
}

  final public void Parameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ParameterList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
}

  final public void ParameterList() throws ParseException {
    Parameter();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      Parameter();
    }
}

  final public void Parameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Type();
}

  final public void ReturnType() throws ParseException {
    jj_consume_token(ARROW);
    Type();
}

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case I8:{
      jj_consume_token(I8);
      break;
      }
    case I16:{
      jj_consume_token(I16);
      break;
      }
    case I32:{
      jj_consume_token(I32);
      break;
      }
    case I64:{
      jj_consume_token(I64);
      break;
      }
    case ISIZE:{
      jj_consume_token(ISIZE);
      break;
      }
    case U8:{
      jj_consume_token(U8);
      break;
      }
    case U16:{
      jj_consume_token(U16);
      break;
      }
    case U32:{
      jj_consume_token(U32);
      break;
      }
    case U64:{
      jj_consume_token(U64);
      break;
      }
    case USIZE:{
      jj_consume_token(USIZE);
      break;
      }
    case F32:{
      jj_consume_token(F32);
      break;
      }
    case F64:{
      jj_consume_token(F64);
      break;
      }
    case BOOL_TYPE:{
      jj_consume_token(BOOL_TYPE);
      break;
      }
    case CHAR_TYPE:{
      jj_consume_token(CHAR_TYPE);
      break;
      }
    case STR_TYPE:{
      jj_consume_token(STR_TYPE);
      break;
      }
    case STRING_TYPE:{
      jj_consume_token(STRING_TYPE);
      break;
      }
    case UNIT_TYPE:{
      jj_consume_token(UNIT_TYPE);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:
      case IF:
      case LOOP:
      case WHILE:
      case FOR:
      case BREAK:
      case CONTINUE:
      case RETURN:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
}

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      LetStatement();
      jj_consume_token(SEMICOLON);
      break;
      }
    case RETURN:{
      ReturnStatement();
      jj_consume_token(SEMICOLON);
      break;
      }
    case IF:{
      IfExpression();
      break;
      }
    case LOOP:{
      LoopExpression();
      break;
      }
    case WHILE:{
      WhileExpression();
      break;
      }
    case FOR:{
      ForExpression();
      break;
      }
    case BREAK:{
      BreakStatement();
      jj_consume_token(SEMICOLON);
      break;
      }
    case CONTINUE:{
      ContinueStatement();
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void LetStatement() throws ParseException {
    jj_consume_token(LET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUT:{
      jj_consume_token(MUT);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      Type();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      Expression();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
}

  final public void ExpressionStatement() throws ParseException {
    Expression();
}

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case NOT_OP:
    case MINUS:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:{
      Expression();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  final public void IfExpression() throws ParseException {
    jj_consume_token(IF);
    Expression();
    Block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        IfExpression();
        break;
        }
      case LBRACE:{
        Block();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
}

  final public void LoopExpression() throws ParseException {
    jj_consume_token(LOOP);
    Block();
}

  final public void WhileExpression() throws ParseException {
    jj_consume_token(WHILE);
    Expression();
    Block();
}

  final public void ForExpression() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    Expression();
    Block();
}

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
}

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
}

  final public void FunctionCall() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case NOT_OP:
    case MINUS:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:{
      ArgumentList();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
}

  final public void StructField() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUB:{
      jj_consume_token(PUB);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Type();
}

  final public void Expression() throws ParseException {
    ConditionalOrExpression();
}

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR_OP:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR_OP);
      ConditionalAndExpression();
    }
}

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND_OP:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND_OP);
      EqualityExpression();
    }
}

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
    }
}

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case LE:
      case GT:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
}

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
}

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case PERCENT:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        break;
        }
      case PERCENT:{
        jj_consume_token(PERCENT);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
}

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT_OP:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_OP:{
        jj_consume_token(NOT_OP);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
      }
    case LPAREN:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case CHAR_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:{
      PrimaryExpression();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case FLOATING_LITERAL:{
      jj_consume_token(FLOATING_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case CHAR_LITERAL:{
      jj_consume_token(CHAR_LITERAL);
      break;
      }
    case BOOL_LITERAL:{
      jj_consume_token(BOOL_LITERAL);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
      }
    case IDENTIFIER:{
      FunctionCall();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ArgumentList() throws ParseException {
    Expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      Expression();
    }
}

  /** Generated Token Manager. */
  public RustGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000,0x40080,0x0,0x40000,0x0,0x0,0x0,0x0,0xdd000100,0xdd000100,0x200,0x0,0x0,0x0,0x1000000,0x2000000,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x3fffe0,0x1,0x1,0x0,0x80000000,0x0,0x400000,0x1000000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x20000000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x1,0x0,0x2,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x4,0x3e402800,0x0,0x0,0x3e402800,0x0,0x400,0x200,0x18,0x18,0x1e0,0x1e0,0x3000,0x3000,0x1c000,0x1c000,0x2800,0x3e402800,0x3e400000,0x0,};
	}

  /** Constructor with InputStream. */
  public RustGrammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RustGrammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RustGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RustGrammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RustGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RustGrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RustGrammar(RustGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RustGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[94];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 32; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 94; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
