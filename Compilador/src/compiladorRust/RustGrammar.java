/* RustGrammar.java */
/* Generated By:JavaCC: Do not edit this line. RustGrammar.java */
package compiladorRust;

import java.io.FileReader;
import java.io.Reader;

public class RustGrammar implements RustGrammarConstants {

    public static void main(String[] args) {
        String arquivo = args.length > 0 ? args[0] : "TesteLexico.txt";

        try (Reader r = new FileReader(arquivo)) {

            RustGrammar parser = new RustGrammar(r);

            parser.RUN(); // Ou parser.Programa();

            System.out.println("\u2713 Arquivo analisado sem erros.");

        } catch (ParseException e) {
            System.err.println("Erro de sintaxe: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

/* ============================================================
 *  GRAMATICA DA LINGUAGEM RUST
 * ============================================================ */


//Declarando um programa
  static final public void RUN() throws ParseException {
    Programa();
}

//O programa pode importar bibliotecas/ bibliotecas + funçoes / funçoes
  static final public void Programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      DeclararImport();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FN:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      DeclararFuncao();
    }
}

//Declarando bibliotecas em rust
  static final public void DeclararImport() throws ParseException {
    jj_consume_token(USE);
    jj_consume_token(IDENTIFICADOR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DUPLO_DOIS_PONTOS:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(DUPLO_DOIS_PONTOS);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(PONTO_VIRGULA);
}

//Declarando função 
  static final public void DeclararFuncao() throws ParseException {
    jj_consume_token(FN);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABRE_PAR:{
      jj_consume_token(ABRE_PAR);
      ListaParametros();
      jj_consume_token(FECHA_PAR);
      break;
      }
    case PARENTESES:{
      jj_consume_token(PARENTESES);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SETA:{
      TipoRetorno();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    Bloco();
}

//Lista de Parametros de entrada de uma função
  static final public void ListaParametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      Parametro();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRGULA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(VIRGULA);
        Parametro();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

//Parametro
  static final public void Parametro() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(DOIS_PONTOS);
    TipoDeDados();
}

//Tipo de retorno (->)
  static final public void TipoRetorno() throws ParseException {
    jj_consume_token(SETA);
    TipoDeDados();
}

//Declarando a estrutura do bloco do corpo da função
  static final public void Bloco() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:
      case PRINTLN:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      CorpoDaDeclaracao();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:{
      ExpressaoRetorno();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_CHAVE);
}

//Declarando o corpo da declaração
  static final public void CorpoDaDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      DeclararVariavel();
      break;
      }
    case PRINTLN:{
      Println();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Declarando o println de RUST
  static final public void Println() throws ParseException {
    jj_consume_token(PRINTLN);
    jj_consume_token(ABRE_PAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        jj_consume_token(VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          break;
          }
        case INTEGER_LITERAL:
        case FLOATING_LITERAL:
        case STRING_LITERAL:
        case BOOL_LITERAL:{
          Expressao();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PAR);
    jj_consume_token(PONTO_VIRGULA);
}

//Expressões
  static final public void Expressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case FLOATING_LITERAL:{
      jj_consume_token(FLOATING_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case BOOL_LITERAL:{
      jj_consume_token(BOOL_LITERAL);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Declarar variavel 
  static final public void DeclararVariavel() throws ParseException {
    jj_consume_token(LET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUT:{
      jj_consume_token(MUT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOIS_PONTOS:{
      jj_consume_token(DOIS_PONTOS);
      TipoDeDados();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      Expressao();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
}

//Tipos de dados
  static final public void TipoDeDados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case I8:{
      jj_consume_token(I8);
      break;
      }
    case I16:{
      jj_consume_token(I16);
      break;
      }
    case I32:{
      jj_consume_token(I32);
      break;
      }
    case I64:{
      jj_consume_token(I64);
      break;
      }
    case ISIZE:{
      jj_consume_token(ISIZE);
      break;
      }
    case U8:{
      jj_consume_token(U8);
      break;
      }
    case U16:{
      jj_consume_token(U16);
      break;
      }
    case U32:{
      jj_consume_token(U32);
      break;
      }
    case U64:{
      jj_consume_token(U64);
      break;
      }
    case USIZE:{
      jj_consume_token(USIZE);
      break;
      }
    case F32:{
      jj_consume_token(F32);
      break;
      }
    case F64:{
      jj_consume_token(F64);
      break;
      }
    case BOOL_TYPE:{
      jj_consume_token(BOOL_TYPE);
      break;
      }
    case STRING_TYPE:{
      jj_consume_token(STRING_TYPE);
      break;
      }
    case STR_TYPE:{
      jj_consume_token(STR_TYPE);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Retorno explícito/implícito de uma função
  static final public void ExpressaoRetorno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURN:{
      jj_consume_token(RETURN);
      Expressao();
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:{
      ExpressaoSemPontoVirgula();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//Retorno implícito de uma função 
  static final public void ExpressaoSemPontoVirgula() throws ParseException {
    Expressao();
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RustGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x200000,0x20000000,0x200000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x20000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x80,0x0,0x0,0x18000000,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6fff800,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x20,0x0,0x40000000,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x10,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x1d8000,0x0,0x1d8000,0x0,0x80000,0x1d8000,0x0,0x0,0x1,0x0,0x1d8000,};
	}

  /** Constructor with InputStream. */
  public RustGrammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RustGrammar(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RustGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RustGrammar(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RustGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RustGrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RustGrammar(RustGrammarTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RustGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[117];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 117; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
